---
title: Using VMware SQL with MySQL for Tanzu Application Service for Multi-Site replication
owner: MySQL
---
<strong><%= modified_date %></strong>

You can use <%= vars.product_full %> for replication
across multiple foundations or data centers.

You provision a leader-follower service instance across two foundations using the
<%= vars.single_leader_plan %> topology.  This leader-follower service instance is
comprised of two single node instances that are configured for replication.

<p> The <%= vars.single_leader_plan %> plan type is configured separately
  from the leader-follower service plan.
</p>

For more information about the <%= vars.single_leader_plan %> topology,
see [About <%= vars.single_leader_plan %>](./about-multi-site.html).

## <a id="prereq"></a>Prerequisites

Before you use <%= vars.product_short %> across multiple foundations,
you must have:

+ Access to the <%= vars.single_leader_plan %> plan.
Your operator configures this plan and enables access to it in your org and space.
+ Selected two foundations to deploy your <%= vars.single_leader_plan %> leader and follower VMs.
  Your operators must configure these foundations for <%= vars.single_leader_plan_lc %>.
For more information configuring a <%= vars.single_leader_plan %> topology,
see [Preparing for <%= vars.single_leader_plan %>](./prepare-multi-site.html).

## <a id='create-multi-dc'></a>Creating a <%= vars.single_leader_plan %> leader-follower service instance

To create a leader-follower service across multiple foundations:

1. Check the availability of the <%= vars.single_leader_plan %> plan in the Marketplace in both your
foundations.
See [Confirming the <%= vars.product_full %> service availability](use.html#marketplace).
1. Create one <%= vars.single_leader_plan %>  service instance on each foundation.
See [Creating <%= vars.single_leader_plan %> service instances](#create-multi-dc).
1. Enable replication between the <%= vars.single_leader_plan %> service instances.
See [Configuring <%= vars.single_leader_plan %>](#create-service-key).
1. Bind the <%= vars.single_leader_plan %> leader-follower service instance to your apps.
See [Binding a <%= vars.single_leader_plan %> leader-follower service instance to your app](#bind).
5. Modify your app to use the <%= vars.product_short %> service.
See [Using the MySQL service in your app](./use.html#call).

After you create a <%= vars.single_leader_plan %> leader-follower service instance,
you can manage it over the life cycle of your apps and data.
For instructions on how to manage a <%= vars.product_short %> service instance,
see [Managing service instances](./use.html#manage).

### <a id='create-service-instance'></a>Creating <%= vars.single_leader_plan %> service instances

To create a leader-follower service instance across two foundations, you
must create one <%= vars.single_leader_plan %> service instance in each
foundation. You must configure the service instances in each foundation for replication.

<p> The secondary foundation is
the foundation that the follower VM deployed, and usually is your disaster recovery
site.
</p>

To create a multi-site replication service instance in both foundations:

1. Create a <%= vars.single_leader_plan %> service instance in your primary foundation:

    1. Log in to the deployment for your primary foundation by running:

        ```
        cf login PRIMARY-API-URL
        ```
        Where `PRIMARY-API-URL` is the API endpoint for the primary foundation.

    2. Create a primary service instance by running:

        ```
        cf create-service p.mysql PLAN PRIMARY-INSTANCE
        ```

        Where:

        - `PLAN` is the name of the <%= vars.single_leader_plan %> plan you want to use.
        - `PRIMARY-INSTANCE` is a name you choose to identify the service instance.
        This name appears under `service` in output from `cf services`.

        For example:

        <pre class="terminal">$ cf create-service p.mysql db-small primary-node<br>
        Creating service primary-node in org my-org / space my-space as admin...
        OK</pre>

        <p> Do not name your service instance
          <code>leader</code> or <code>follower</code>. If you trigger a failover or switchover,
          the service instances in your primary and secondary foundations switch roles.

          For more information,
          see <a href="./multi-site-trigger-failover.html">Triggering multi-site replication failover and switchover</a>.
        </p>

    3. (Optional) Watch the progress of the service instance creation by running:

        ```
        watch cf services
        ```

        Wait for the `last operation` for your instance to show as `create succeeded`.
        <br><br>
        For example:

        <pre class="terminal">$ watch cf services<br>
        Getting services in org my-org / space my-space as admin...
        OK
        name           service       plan        bound apps    last operation
        primary-node   p.mysql       db-small                  create succeeded
        </pre>

        If you get an error, see [Troubleshooting Instances](./troubleshoot-instances.html).

2. Create a <%= vars.single_leader_plan %> service instance in your secondary
foundation by repeating step 1 and replacing references to `primary` with `secondary`.
Ensure that you log in to deployment for your secondary foundation.

### <a id='create-service-key'></a>Configuring <%= vars.single_leader_plan %>

After you create the <%= vars.single_leader_plan %> service instance in primary and secondary foundations,
you must configure replication between the two service instances.

You configure replication using service keys to pass connection information
between the leader and follower VMs.
You must not use these service keys for any other use case besides establishing
<%= vars.single_leader_plan_lc %>.

#### Workflow for configuring <%= vars.single_leader_plan %>

The following diagram describes the workflow for configuring <%= vars.single_leader_plan_lc %>:

![alt-text="Two boxes are shown side by side, labeled 'Secondary Foundation' and 'Primary Foundation'.
Six steps are shown. Steps 1 and 2 are in 'Secondary Foundation', Steps 3, 4, and 5 are in 'Primary Foundation',
and Step 6 is in 'Secondary Foundation'."](./images/configure-multi-site.png)

<a href="./images/configure-multi-site.png" target="_blank" aria-hidden="true">View a larger version of this diagram</a>

The steps shown in the diagram are as follows:

1. Create host-info service key.
2. Record host-info service key.
3. Update secondary service instance with host-info service key.
4. Create credentials service key.
5. Record credentials service key.
6. Update primary service instance with credentials service key.

#### Procedure for configuring <%= vars.single_leader_plan %>

<p> The following procedure assumes you created the leader service instance in
the primary foundation and the follower service instance in the secondary foundation.
You created these service instances in
<a href="#create-multi-dc">Creating <%= vars.single_leader_plan %> service instances</a>.
</p>

To configure replication for your <%= vars.single_leader_plan %> leader-follower service instance:

1. Create a host-info service key for the service instance in your secondary foundation by running:

    ```console
    cf create-service-key SECONDARY-INSTANCE SERVICE-KEY \
      -c '{"replication-request": "host-info"}'
    ```
    Where:

    + `SECONDARY-INSTANCE` is the name of the secondary service instance you created in
    step 2 of [Creating <%= vars.single_leader_plan %> service instances](#create-multi-dc).
    + `SERVICE-KEY` is a name you choose for the host-info service key.
    <br><br>

    For example:
    <pre class="terminal">$ cf create-service-key secondary-node host-info \
           -c '{"replication-request": "host-info" }'<br>
        Creating service key host-info for service instance secondary-node as admin...
        OK
    </pre>

1. View the `replication-credentials` for your host-info service key by running:

    ```console
    cf service-key SECONDARY-INSTANCE SERVICE-KEY
    ```
    Where:

    + `SECONDARY-INSTANCE` is the name of the secondary service instance you created in
    step 2 of [Creating <%= vars.single_leader_plan %> service instances](#create-multi-dc).
    + `SERVICE-KEY` is the name of the host-info service key you created in step 1.

    For example:

    <pre class="terminal">$ cf service-key secondary-node host-info-key <br>
    Getting key host-info-key for service instance secondary-node as admin...

      {
        "replication": {
            "peer-info": {
              "hostname": "secondary.bosh",
              "ip": "10.0.19.12",
              "system_domain": "sys.secondary-domain.com",
              "uuid": "ab12cd34-5678-91e2-345f-67891h234567"
          },
          "role": "leader"
        }
      }</pre>
1. Record the output of the previous command.
1. Log in to the deployment for your primary foundation by running:

    ```
    cf login PRIMARY-API-URL
    ```
1. Update your primary service instance with the host-info service key by running:
   ```
   cf update-service PRIMARY-INSTANCE -c HOST-INFO
    ```
   Where:

    + `PRIMARY-INSTANCE` is the name of the primary service instance you created in
      step 1 of [Creating <%= vars.single_leader_plan %> service instances](#create-multi-dc).
    + `HOST-INFO` is the output you recorded in step 3.

   For example:
   1. Routable Foundations. See Multi-Site [Prerequisites](#prepare-multi-site.html#prerequisites).

    <pre class="terminal">$ cf update-service primary-node -c '{
    "replication":{ \
      "peer-info":{ \
          "hostname": "secondary.bosh", \
          "ip": "10.0.18.12", \
          "system_domain": "sys.secondary-domain.com", \
          "uuid": "ab12cd34-5678-91e2-345f-67891h234567" \
        },\
      "role": "leader" \
      } \
    }'<br>
    Updating service instance primary-node as admin...
    OK</pre>
   2. Non-Routable Foundations. See Multi-Site [Prerequisites](#prepare-multi-site.html#prerequisites).
   
    <pre class="terminal">$ cf update-service primary-node -c '{
    <text style="color:DodgerBlue;"><b>"enable_external_access": true, </b></text>
    "replication":{ \
      "peer-info":{ \
          "hostname": "secondary.bosh", \
          "ip": "10.0.18.12", \
          "system_domain": "sys.secondary-domain.com", \
          "uuid": "ab12cd34-5678-91e2-345f-67891h234567" \
        },\
      "role": "leader" \
      } \
    }'<br>
    Updating service instance primary-node as admin...
    OK</pre>
   
2. Watch the progress of the service instance by running:

    ```
    watch cf services
    ```

    Wait for the `last operation` for your instance to show as `update succeeded`.
    <br><br>
    For example:

    <pre class="terminal">$ watch cf services<br>
    Getting services in org my-org / space my-space as admin...
    OK
    name           service       plan        bound apps    last operation
    primary-node   p.mysql       db-small                  update succeeded
  </pre>

    If you get an error, see [Troubleshooting instances](./troubleshoot-instances.html).
1.  Create a credentials service key for the service instance in your primary foundation by
    running:

    ```
    cf create-service-key PRIMARY-INSTANCE SERVICE-KEY-NAME \
      -c '{"replication-request": "credentials"}'
    ```
    Where:

    + `PRIMARY-INSTANCE` is the name of the primary service instance you created in
    step 1 of [Creating <%= vars.single_leader_plan %> service instances](#create-multi-dc).
    + `SERVICE-KEY-NAME` is a name you choose for the credentials service key.
    <br><br>

    For example:
    <pre class="terminal">$ cf create-service-key primary-node cred-key \
          -c '{"replication-request": "credentials" }' <br>
      Creating service key cred-key for service instance primary-node as admin...
      OK
    </pre>
    <p> The <code>-c </code> flag is different than the one in step 1.
    </p>
1. View the `replication-credentials` for your credentials service key by running:

    ```
    cf service-key PRIMARY-INSTANCE SERVICE-KEY-NAME
    ```
    Where:

    + `PRIMARY-INSTANCE` is the name of the primary service instance you created in step 1
    of [Creating <%= vars.single_leader_plan %> service instances](#create-multi-dc).
    + `SERVICE-KEY-NAME` is the name of the credentials service key you created in step 6.

    For example:

    <pre class="terminal">$ cf service-key primary-node cred-key <br>
    Getting key cred-key for service instance primary as admin...

      {
        "replication": {
          "credentials": {
            "password": "a22aaa2a2a2aaaaa",
            "username": "6bf07ae455a14064a9073cec8696366c"
          },
          "peer-info": {
            "hostname": "primary.bosh",
            "ip": "10.0.17.12",
            "system_domain": "sys.primary-domain.com",
            "uuid": "zy98xw76-5432-19v8-765u-43219t876543"
          },
          "role": "follower"
        }
      }</pre>

1. Record the output of the previous command.
1. Log in to the deployment for your secondary foundation by running:

    ```console
    cf login SECONDARY-API-URL
    ```
1. Update your secondary service instance with the credentials service key by running:

    ```console
    cf update-service SECONDARY-INSTANCE -c CREDENTIALS
    ```
    Where:

    + `SECONDARY-INSTANCE` is name of the secondary service instance you created in step 2 of
    [Creating <%= vars.single_leader_plan %> service instances](#create-multi-dc).
    + `CREDENTIALS` is the output you recorded in step 8.

    For example:
    <pre class="terminal">$ cf update-service secondary-node -c '{"replication": { \
        "credentials": { \
          "password": "a22aaa2a2a2aaaaa", \
          "username": "6bf07ae455a14064a9073cec8696366c" \
        }, \
        "peer-info": { \
          "hostname": "primary.bosh", \
          "ip": "10.0.17.12", \
          "system_domain": "sys.primary-domain.com", \
          "uuid": "zy98xw76-5432-19v8-765u-43219t876543" \
        }, \
        "role": "follower" \
      } \
    }'<br>
    Updating service instance primary-node as admin...
    OK</pre>

You now have a <%= vars.single_leader_plan %> leader-follower
service instance that is fully configured and has replication enabled.

### <a id='upgrade'></a>Upgrading a <%= vars.single_leader_plan %> leader-follower service

It is important to upgrade the <%= vars.single_leader_plan %> Leader-Follower service in a specific order: Follower
first, then Leader. This ensures that any incompatibilities between different <%= vars.product_short %> versions are handled correctly.

### <a id='bind'></a>Binding a <%= vars.single_leader_plan %> leader-follower service instance to your app

For an app to use a <%= vars.single_leader_plan %> leader-follower service instance,
you must bind your app to your primary service instance in your primary foundation.
If you want to use an active-active topology,
you must additionally bind your app to the secondary service instance in your secondary foundation.

For information about active-passive and app-layer active-active topologies,
see see [About active-passive topology](./about-multi-site.html#active-passive)
and [About app-layer active-active topology](./about-multi-site.html#active-active).

To bind an app to a leader-follower service instance:

1. Log in to the deployment for your primary foundation by running:

    ```
    cf login PRIMARY-API-URL
    ```
1. Bind your app to your primary service instance by doing the procedure in
[Binding a service instance to your app](./use.html#bind).

1. (Optional) If you are using an active-active topology,
you must bind the same app to your secondary service instance in your secondary foundation.
To do this, repeat the previous steps and replace references to `primary` with `secondary`.

1. Modify your app to use the <%= vars.product_short %> service by using the procedure in
  [Using the MySQL service in your app](./use.html#call).
