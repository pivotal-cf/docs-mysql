---
title: Using VMware SQL with MySQL for Tanzu Application Service for multi-site replication
owner: MySQL
---
<strong><%= modified_date %></strong>

This topic provides instructions for developers configuring multi-site replication
across multiple foundations or data centers.

You provision a pair of service instances across two foundations. Your leader instance
may be either a <%= vars.single_leader_plan %> topology or HA Cluster topology. Your follower
instance must be a <%= vars.single_leader_plan %> topology. These two instances are then configured
to replicate from the leader to the follower.

<p>Multi-site replication is configured separately
  from the leader-follower service plan. Any mention on this page of "leader" and "follower"
refers to the two service instances provisioned above for multi-site configuration (not to any
service instance of type "leader-follower").
</p>

For more information about the <%= vars.single_leader_plan %> topology,
see [About <%= vars.single_leader_plan %>](./about-multi-site.html).

For more information about the HA Cluster topology,
see [About highly available clusters](./about-ha.html).

## <a id="prereq"></a>Prerequisites

Before you use <%= vars.product_short %> across multiple foundations,
you must:

+ Select two foundations to deploy your multi-site leader and follower
  service instances.
+ Select which topology to use as your leader instance <%= vars.single_leader_plan %>
    or HA Cluster.
+ Have access to the <%= vars.single_leader_plan %> plan on both foundations (even if choosing a HA Cluster
as your leader instance).
Your operator configures the <%= vars.single_leader_plan %> plan and enables access to it in your org and space.
+ Have access to a HA Cluster plan if you want a HA Cluster as your multi-site leader instance.
+ Verify that your operator has configured both foundations with a <%= vars.single_leader_plan_lc %> plan
(and optionally with a HA Cluster plan).
  + For more information configuring a <%= vars.single_leader_plan %> plan,
see [Preparing for <%= vars.single_leader_plan %>](./prepare-multi-site.html).
  + For more information configuring a a high-availability cluster plan,
    see [Preparing for high-availability clusters](./prepare-ha.html).



## <a id="prereq"></a>Select a leader plan type


<table class="table">
  <thead>
  <tr>
    <th width="33%">Leader Topology</th>
    <th width="33%">Failover if...</th>
    <th>Switchover if...</th>
  </tr>
  </thead>
  <tr>
    <td><%= vars.single_leader_plan %></td>
    <td>
      <ul>
        <li>The leader MySQL process has crashed
          or is unhealthy and is not automatically recovered by BOSH.</li>
        <li>The leader VM is destroyed or unrecoverable.</li>
        <li>The availability zone (AZ) for the leader VM experiences an unexpected outage.</li>
        <li>The data center for the leader VM experiences an unexpected outage.</li>
      </ul>
    </td>
    <td>
      <ul>
        <li>Both the leader and the follower instance are healthy. </li>
        <li>You plan to do foundation or data center upgrades or maintenance on your primary site.
          For example, upgrading stemcells or data center hardware.</li>
        <li>You plan to degrade performance on the primary site.</li>
      </ul>
    </td>
  </tr>
  <tr>
    <td>High-Availability Cluster</td>
    <td>
      <ul>
        <li>The entire leader cluster has crashed
          or is unhealthy and is not automatically recovered by BOSH.</li>
        <li>The availability zone (AZ) for the leader MySQL service instance experiences an unexpected outage.</li>
        <li>The data center for the leader MySQL service instance experiences an unexpected outage.</li>
      </ul>
    </td>
    <td>
      <ul>
        <li>Both the leader and the follower MySQL service instances are healthy. </li>
        <li>You plan to do foundation or data center maintenance which can disable your HA cluster.
          For example, upgrading data center hardware.</li>
        <li>You plan to degrade performance on the primary site.</li>
      </ul>
    </td>
  </tr>
</table>

## <a id='create-multi-dc-with-mysql-tools'></a>Create a <%= vars.single_leader_plan %> leader-follower service instance using mysql-tools

To create a leader-follower service across multiple foundations with mysql-tools:

1. Check the availability of the <%= vars.single_leader_plan %> plan in the Marketplace in both your
   foundations.
   See [Confirm the <%= vars.product_full %> service availability](use.html#marketplace).
1. Download the latest version of the `mysql-tools` plugin. For more information about `mysql-tools` cf CLI plug-in,
   see [mysql-cli-plugin](https://github.com/pivotal-cf/mysql-cli-plugin) in GitHub.
1. Configure Replication between the primary and secondary foundation using mysql-tools. 
See [Create <%= vars.single_leader_plan %> service instances using mysql-tools](#create-multi-dc-with-mysql-tools).
1. Bind the <%= vars.single_leader_plan %> leader-follower service instance to your apps. 
See [Bind a <%= vars.single_leader_plan %> leader-follower service instance to your app](#bind).
1. Modify your app to use the <%= vars.product_short %> service. See [Use the MySQL service in your app](./use.html#call).

### <a id='configure-replication-with-mysql-tools'></a>Setup <%= vars.single_leader_plan %> using mysql-tools

To create a leader-follower service instance across two foundations with mysql-tools, you must:
1. Use mysql-tools to save the cloudfoundry configuration for the primary foundation.
1. Create a <%= vars.single_leader_plan %> service instance in the primary foundation.
1. Use mysql-tools to save the cloudfoundry configuration for the secondary foundation.
1. Create a <%= vars.single_leader_plan %> service instance in the secondary foundation.
1. Use mysql-tools to configure replication between the primary and secondary foundations.

<p> The secondary foundation is
the foundation where the secondary VM is deployed, and usually is your disaster recovery
site.
</p>

1. Create a <%= vars.single_leader_plan %> service instance in your primary foundation:

    1. Log in to the deployment for your primary foundation by running:

        ```
        cf login PRIMARY-API-URL
        ```
       Where `PRIMARY-API-URL` is the API endpoint for the primary foundation.

    2. Create a primary service instance by running:

        ```
        cf create-service p.mysql PLAN PRIMARY-INSTANCE
        ```

       Where:

        - `PLAN` is the name of the <%= vars.single_leader_plan %> plan you want to use.
        - `PRIMARY-INSTANCE` is a name you choose to identify the service instance.
          This name appears under `service` in output from `cf services`.

       For example:

        <pre class="terminal">$ cf create-service p.mysql db-small primary-node<br>
        Creating service primary-node in org my-org / space my-space as admin...
        OK</pre>

        <p> Do not name your service instance
          <code>leader</code> or <code>follower</code>. If you trigger a failover or switchover,
          the service instances in your primary and secondary foundations switch roles.
          For more information,
          see <a href="./multi-site-trigger-failover.html">Triggering multi-site replication failover and switchover</a>.
        </p>

    3. (Optional) Watch the progress of the service instance creation by running:

        ```
        watch cf services
        ```

       Wait for the `last operation` for your instance to show as `create succeeded`.
       <br><br>
       For example:

        <pre class="terminal">$ watch cf services<br>
        Getting services in org my-org / space my-space as admin...
        OK
        name           service       plan        bound apps    last operation
        primary-node   p.mysql       db-small                  create succeeded
        </pre>

       If you get an error, see [Troubleshooting instances](./troubleshoot-instances.html).

To save the cf config of the primary foundation:

1. login to the primary foundation:

    1. Log in to the deployment for your primary foundation by running:

        ```
        cf login PRIMARY-API-URL
        ```
       Where `PRIMARY-API-URL` is the API endpoint for the primary foundation.
   2. Use mysql-tools to save the config

        ```
        cf mysql-tools save-target PRIMARY-TARGET-NAME
        ```
        Where `PRIMARY-TARGET-NAME` is your chosen name for the primary foundation.

2. Create a <%= vars.single_leader_plan %> service instance in your secondary
   foundation by repeating step 1 and replacing references to `primary` with `secondary`.
   Ensure that you log in to deployment for your secondary foundation.

To save the cf config of the secondary foundation:

1. login to the secondary foundation:

    1. Log in to the deployment for your secondary foundation by running:

        ```
        cf login SECONDARY-API-URL
        ```
       Where `SECONDARY-API-URL` is the API endpoint for the primary foundation.
    2. Use mysql-tools to save the config

         ```
         cf mysql-tools save-target SECONDARY-TARGET-NAME
         ```
        Where `SECONDARY-TARGET-NAME` is your chosen name for the secondary foundation.

To configure replication between the primary and secondary foundations:

1. Use mysql-tools to configure replication between the primary and secondary foundation:

    1. Configure replication between the primary and secondary foundation by running:

        ```
        cf mysql-tools PRIMARY-TARGET-NAME PRIMARY-INSTANCE SECONDARY-TARGET-NAME SECONDARY-INSTANCE
        ```
       Where `PRIMARY-TARGET-NAME` is your chosen name for the primary foundation.
       Where `PRIMARY-INSTANCE` is your chosen name for the primary instance.
       Where `SECONDARY-TARGET-NAME` is your chosen name for the secondary foundation.
       Where `SECONDARY-INSTANCE` is your chosen name for the secondary instance.


## <a id='create-multi-dc'></a>Create a <%= vars.single_leader_plan %> leader-follower service instance

To create a leader-follower service across multiple foundations:

1. Check the availability of the <%= vars.single_leader_plan %> plan in the Marketplace in both your
foundations.
See [Confirm the <%= vars.product_full %> service availability](use.html#marketplace).
1. Create one <%= vars.single_leader_plan %>  service instance on each foundation.
See [Create <%= vars.single_leader_plan %> service instances](#create-service-instance).
1. Enable replication between the <%= vars.single_leader_plan %> service instances.
See [Configure <%= vars.single_leader_plan %>](#create-service-key).
1. Bind the <%= vars.single_leader_plan %> leader-follower service instance to your apps.
See [Bind a <%= vars.single_leader_plan %> leader-follower service instance to your app](#bind).
5. Modify your app to use the <%= vars.product_short %> service.
See [Use the MySQL service in your app](./use.html#call).

After you create a <%= vars.single_leader_plan %> leader-follower service instance,
you can manage it over the life cycle of your apps and data.
For instructions on how to manage a <%= vars.product_short %> service instance,
see [Manage service instances](./use.html#manage).

### <a id='create-service-instance'></a>Create <%= vars.single_leader_plan %> service instances

To create a leader-follower service instance across two foundations, you
must create one <%= vars.single_leader_plan %> service instance in each
foundation. You must configure the service instances in each foundation for replication.

<p> The secondary foundation is
the foundation that the follower VM deployed, and usually is your disaster recovery
site.
</p>

To create a multi-site replication service instance in both foundations:

1. Create a <%= vars.single_leader_plan %> service instance in your primary foundation:

    1. Log in to the deployment for your primary foundation by running:

        ```
        cf login PRIMARY-API-URL
        ```
        Where `PRIMARY-API-URL` is the API endpoint for the primary foundation.

    2. Create a primary service instance by running:

        ```
        cf create-service p.mysql PLAN PRIMARY-INSTANCE
        ```

        Where:

        - `PLAN` is the name of the <%= vars.single_leader_plan %> plan you want to use.
        - `PRIMARY-INSTANCE` is a name you choose to identify the service instance.
        This name appears under `service` in output from `cf services`.

        For example:

        <pre class="terminal">$ cf create-service p.mysql db-small primary-node<br>
        Creating service primary-node in org my-org / space my-space as admin...
        OK</pre>

        <p> Do not name your service instance
          <code>leader</code> or <code>follower</code>. If you trigger a failover or switchover,
          the service instances in your primary and secondary foundations switch roles.
          For more information,
          see <a href="./multi-site-trigger-failover.html">Triggering multi-site replication failover and switchover</a>.
        </p>

    3. (Optional) Watch the progress of the service instance creation by running:

        ```
        watch cf services
        ```

        Wait for the `last operation` for your instance to show as `create succeeded`.
        <br><br>
        For example:

        <pre class="terminal">$ watch cf services<br>
        Getting services in org my-org / space my-space as admin...
        OK
        name           service       plan        bound apps    last operation
        primary-node   p.mysql       db-small                  create succeeded
        </pre>

        If you get an error, see [Troubleshooting instances](./troubleshoot-instances.html).

2. Create a <%= vars.single_leader_plan %> service instance in your secondary
foundation by repeating step 1 and replacing references to `primary` with `secondary`.
Ensure that you log in to deployment for your secondary foundation.

### <a id='create-service-key'></a>Configure <%= vars.single_leader_plan %>

After you create the <%= vars.single_leader_plan %> service instance in primary and secondary foundations,
you must configure replication between the two service instances.

You configure replication using service keys to pass connection information
between the leader and follower VMs.
You must not use these service keys for any other use case besides establishing
<%= vars.single_leader_plan_lc %>.

#### Workflow for configuring <%= vars.single_leader_plan %>

The following diagram describes the workflow for configuring <%= vars.single_leader_plan_lc %>:

![alt-text="Two boxes labeled 'Secondary Foundation' and 'Primary Foundation'.
Six steps are shown. Steps 1 and 2 are in 'Secondary Foundation', Steps 3, 4, and 5 are in 'Primary Foundation',
and Step 6 is in 'Secondary Foundation'."](./images/configure-multi-site.png)

<a href="./images/configure-multi-site.png" target="_blank" aria-hidden="true">View a larger version of this diagram</a>

The steps shown in the diagram are as follows:

1. Create host-info service key.
2. Record host-info service key.
3. Update secondary service instance with host-info service key.
4. Create credentials service key.
5. Record credentials service key.
6. Update primary service instance with credentials service key.

#### Procedure for configuring <%= vars.single_leader_plan %>

<p> The following procedure assumes you created the leader service instance in
the primary foundation and the follower service instance in the secondary foundation.
You created these service instances in
<a href="#create-service-instance">Create <%= vars.single_leader_plan %> service instances</a>.
</p>

To configure replication for your <%= vars.single_leader_plan %> leader-follower service instance:

1. Create a host-info service key for the service instance in your secondary foundation by running:

    ```console
    cf create-service-key SECONDARY-INSTANCE SERVICE-KEY \
      -c '{"replication-request": "host-info"}'
    ```
    Where:

    + `SECONDARY-INSTANCE` is the name of the secondary service instance you created in
    step 2 of [Create <%= vars.single_leader_plan %> service instances](#create-service-instance).
    + `SERVICE-KEY` is a name you choose for the host-info service key.
    <br><br>

    For example:
    <pre class="terminal">$ cf create-service-key secondary-node host-info \
           -c '{"replication-request": "host-info" }'<br>
        Creating service key host-info for service instance secondary-node as admin...
        OK
    </pre>

1. View the `replication-credentials` for your host-info service key by running:

    ```console
    cf service-key SECONDARY-INSTANCE SERVICE-KEY
    ```
    Where:

    + `SECONDARY-INSTANCE` is the name of the secondary service instance you created in
    step 2 of [Create <%= vars.single_leader_plan %> service instances](#create-service-instance).
    + `SERVICE-KEY` is the name of the host-info service key you created in step 1.

    For example:

    <pre class="terminal">$ cf service-key secondary-node host-info-key <br>
    Getting key host-info-key for service instance secondary-node as admin...

      {
        "credentials": {
            "replication": {
                "peer-info": {
                  "hostname": "6497378d-f518-4922-92d5-9530d3dc634a.mysql.service.internal",
                  "ip": "10.0.19.12",
                  "system_domain": "sys.secondary-domain.com",
                  "uuid": "6497378d-f518-4922-92d5-9530d3dc634a"
              },
              "role": "leader"
            }
        }
      }</pre>

    >**Caution** This procedure assumes you are using cf CLI v8 or greater. Earlier cf CLI versions do not include the top-level `credentials` JSON key in their `cf service-key` response.

1. Record the output of the previous command, and remove the top-level `credentials` key.
1. Log in to the deployment for your primary foundation by running:

    ```
    cf login PRIMARY-API-URL
    ```
1. Update your primary service instance with the host-info service key by running:
   ```
   cf update-service PRIMARY-INSTANCE -c HOST-INFO
    ```
   Where:

    + `PRIMARY-INSTANCE` is the name of the primary service instance you created in
      step 1 of [Creating <%= vars.single_leader_plan %> service instances](#create-service-instance).
    + `HOST-INFO` is the output you recorded in step 3.

   For example:
    <pre class="terminal">$ cf update-service primary-node -c '{
    "replication":{ \
      "peer-info":{
          "hostname": "6497378d-f518-4922-92d5-9530d3dc634a.mysql.service.internal",
          "ip": "10.0.18.12",
          "system_domain": "sys.secondary-domain.com",
          "uuid": "6497378d-f518-4922-92d5-9530d3dc634a"
        },
      "role": "leader"
      }
    }'<br>
    Updating service instance primary-node as admin...
    OK</pre>

2. Watch the progress of the service instance by running:

    ```
    watch cf services
    ```

    Wait for the `last operation` for your instance to show as `update succeeded`.
    <br><br>
    For example:

    <pre class="terminal">$ watch cf services<br>
    Getting services in org my-org / space my-space as admin...
    OK
    name           service       plan        bound apps    last operation
    primary-node   p.mysql       db-small                  update succeeded
  </pre>

    If you get an error, see [Troubleshooting instances](./troubleshoot-instances.html).
1.  Create a credentials service key for the service instance in your primary foundation by
    running:

    ```
    cf create-service-key PRIMARY-INSTANCE SERVICE-KEY-NAME \
      -c '{"replication-request": "credentials"}'
    ```
    Where:

    + `PRIMARY-INSTANCE` is the name of the primary service instance you created in
    step 1 of [Create <%= vars.single_leader_plan %> service instances](#create-service-instance).
    + `SERVICE-KEY-NAME` is a name you choose for the credentials service key.

    <br>(Note the <code>-c </code> flag is different than the flag used in step 1.)

    <br>

    For example:
    <pre class="terminal">$ cf create-service-key primary-node cred-key \
          -c '{"replication-request": "credentials" }' <br>
      Creating service key cred-key for service instance primary-node as admin...
      OK
    </pre>
    </p>
1. View the `replication-credentials` for your credentials service key by running:

    ```
    cf service-key PRIMARY-INSTANCE SERVICE-KEY-NAME
    ```
    Where:

    + `PRIMARY-INSTANCE` is the name of the primary service instance you created in step 1
    of [Create <%= vars.single_leader_plan %> service instances](#create-service-instance).
    + `SERVICE-KEY-NAME` is the name of the credentials service key you created in step 6.

    For example:

    <pre class="terminal">$ cf service-key primary-node cred-key <br>
    Getting key cred-key for service instance primary as admin...

      {
        "credentials": {
          "replication": {
            "credentials": {
              "password": "a22aaa2a2a2aaaaa",
              "username": "6bf07ae455a14064a9073cec8696366c"
            },
            "peer-info": {
              "hostname": "878f5fb3-fcc5-43cd-8c1f-3018e9f277ad.mysql.service.internal",
              "ip": "10.0.17.12",
              "ports": {
                  "agent":  8443,
                  "backup": 8081,   
                  "mysql":  3306
               },
              "system_domain": "sys.primary-domain.com",
              "uuid": "878f5fb3-fcc5-43cd-8c1f-3018e9f277ad"
            },
            "role": "follower"
          }
        }
      }</pre>

    >**Caution** This procedure assumes you are using cf CLI v8 or greater. Earlier cf CLI versions do not include the top-level `credentials` JSON key in their `cf service-key` response.

1. Record the output of the previous command, and remove the top-level `credentials` JSON key. The resulting
JSON is your "credentials *service* key".
1. Log in to the deployment for your secondary foundation by running:

    ```console
    cf login SECONDARY-API-URL
    ```
1. Update your secondary service instance with the credentials service key by running:

    ```console
    cf update-service SECONDARY-INSTANCE -c CREDENTIALS
    ```
    Where:

    + `SECONDARY-INSTANCE` is name of the secondary service instance you created in step 2 of
    [Create <%= vars.single_leader_plan %> service instances](#create-service-instance).
    + `CREDENTIALS` is the output you recorded in step 9.

    For example:
    <pre class="terminal">$ cf update-service secondary-node -c '{"replication": {
        "credentials": {
          "password": "a22aaa2a2a2aaaaa",
          "username": "6bf07ae455a14064a9073cec8696366c"
        },
        "peer-info": {
          "hostname": "878f5fb3-fcc5-43cd-8c1f-3018e9f277ad.mysql.service.internal",
          "ip": "10.0.17.12",
          "ports": {
            "agent":  8443,
            "backup": 8081,   
            "mysql":  3306
           },
          "system_domain": "sys.primary-domain.com",
          "uuid": "878f5fb3-fcc5-43cd-8c1f-3018e9f277ad"
        },
        "role": "follower"
      }
    }'<br>
    Updating service instance primary-node as admin...
    OK</pre>

You now have a <%= vars.single_leader_plan %> leader-follower
service instance that is fully configured and has replication enabled.

### <a id='upgrade'></a>Upgrade a <%= vars.single_leader_plan %> leader-follower service

It is important to upgrade the <%= vars.single_leader_plan %> leader-follower service in a
specific order: Follower
first, then leader. This ensures that any incompatibilities between
different <%= vars.product_short %> versions are handled correctly.

### <a id='bind'></a>Bind a <%= vars.single_leader_plan %> Leader-follower service instance to your app

For an app to use a <%= vars.single_leader_plan %> leader-follower service instance,
you must bind your app to your primary service instance in your primary foundation.
If you want to use an active-active topology,
you must additionally bind your app to the secondary service instance in your secondary foundation.

For information about active-passive and app-layer active-active topologies,
see see [About active-passive topology](./about-multi-site.html#active-passive)
and [About appp-layer active-active topology](./about-multi-site.html#active-active).

To bind an app to a leader-follower service instance:

1. Log in to the deployment for your primary foundation by running:

    ```
    cf login PRIMARY-API-URL
    ```
1. Bind your app to your primary service instance by doing the procedure in
[Bind a service instance to your app](./use.html#bind).

1. (Optional) If you are using an active-active topology,
you must bind the same app to your secondary service instance in your secondary foundation.
To do this, repeat the previous steps and replace references to `primary` with `secondary`.

1. Modify your app to use the <%= vars.product_short %> service by using the procedure in
  [Use the MySQL service in your app](./use.html#call).
