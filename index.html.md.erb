M---
title: MySQL for Pivotal Cloud Foundry&reg;
owner: MySQL
---

This is documentation for the MySQL service for [Pivotal Cloud Foundry&reg;](https://network.pivotal.io/products/pivotal-cf).

## <a id="edge-release"></a>Edge Release ##

We're experimenting with Edge releases in order to give early adopters access to features before a release is Feature Complete. With Edge releases, we can better follow the Semantic Versioning convention by avoiding introducing features in patch releases.

If we stick with this pilot, an Edge release will expose our users to Pivotal's agile process. As we add features, they'll be test-driven and have passed through continuous integration. Edge releases are considered production quality. When a full release is Feature Complete, we'll drop the 'edge' moniker and release the minor, e.g. 1.9.0, version. Subsequent patch releases, 1.9.1, 1.9.2, etc., will contain only security and bug fixes. New features will be released in the next edge release, 1.10.0-Edge.1.

<center><%= image_tag 'Edge-Releases.png' %></center>

## <a id="product-snapshot"></a>Product Snapshot ##

Current MySQL for Pivotal Cloud Foundry&reg; Details
<div style="line-height: 1; padding-left: 3em">

- **Version**: 1.8.0 - Edge.6
- **Release Date**: 2016-05-18
- **Software component versions**: MariaDB 10.0.23, Galera 25.3.9
- **Compatible Ops Manager Version(s)**: 1.5.x, 1.6.x
- **Compatible Elastic Runtime Version(s)**: 1.5.x, 1.6.x
- **vSphere support?** Yes
- **AWS support?** Yes
- **OpenStack support?** Yes

</div>

## <a id="upgrading"></a>Upgrading to the Latest Version ##
Consider the following compatibility information before upgrading MySQL.

For more information, refer to the full [Product Version Matrix](../../compatibility-matrix.pdf).

<table border="1" class="nice">
<tr>
	<th rowspan="2">Ops Manager Version</th>
	<th colspan="2">Supported Upgrades from Imported MySQL Installation</th>
</tr>

<tr>
	<th>From</th>
	<th>To</th>
<tr>

<tr>
	<th rowspan="2">1.3.x</th>
	<td>1.2</td>
	<td>1.3</td>
	<tr>
		<td>1.3.2</td>
		<td>1.4.0</td>
	</tr>
</tr>

<tr>
	<th rowspan="2">1.4.x and 1.5.x</th>
	<td rowspan="2">1.3.2</td>
	<td>1.4.0</td>
	<tr>
		<td>1.5.0</td>
	</tr>
</tr>


<tr>
	<th rowspan="9">1.4.x, 1.5.x<br>1.6.x, 1.7.x</th>
	<td>1.4.0</td>
	<td>1.5.0</td>

	<tr>
		<td>1.5.0</td>
		<td>1.6.1 - 1.6.11</td>
	</tr>

	<tr>
		<td>1.6.1 - 1.6.11</td>
		<td>Next 1.6.X release - 1.8.0-edge.6</td>
	</tr>

	<tr>
		<td>1.7.0 - 1.7.8</td>
		<td>Next 1.7.X release - 1.8.0-edge.6</td>
	</tr>

	<tr>
		<td>1.8.0-e.1 - 1.8.0-e.5</td>
		<td>Next 1.8.X release - 1.8.0-edge.6</td>
	</tr>
</tr>

</table>

## <a id="release-notes"></a>Release Notes ##

Consult the [Release Notes](release-notes.html) for information about changes between versions of this product.

## <a id="limitations"></a>Limitations ##

- While two Proxy instances are deployed by default, there is no automation to direct clients from one to the other. See the note in the [Proxy](#proxy) section, as well as the entry in [Known Issues](known-issues.html).
- Only the InnoDB storage engine is supported; it is the default storage engine for new tables. Attempted use of other storage engines (including MyISAM) may result in data loss.
- All databases are managed by shared, multi-tenant server processes. Although data is securely isolated between tenants using unique credentials, application performance may be impacted by noisy neighbors.
- Round-trip latency between database nodes must be less than five seconds; if the latency is higher than this, nodes will become partitioned. If more than half of cluster nodes are partitioned, the cluster will lose quorum and become unusable until manually bootstrapped.
- See also the list of [Known Limitations](https://mariadb.com/kb/en/mariadb/mariadb-galera-cluster-known-limitations/) in MariaDB cluster.

## <a id="known-issues"></a>Known Issues ##

Consult the [Known Issues](known-issues.html) topic for information about issues in current releases of p-mysql.

## <a id="installation"></a>Installation ##

1. Download the product file from [Pivotal Network](https://network.pivotal.io/products/p-mysql).
1. Upload the product file to your Ops Manager installation.
1. Click **Add** next to the uploaded product description in the Available Products view to add this product to your staging area.
1. Click the newly added tile to review configurable [Settings](#settings).
1. Click **Apply Changes** to deploy the service.

## <a id="settings"></a>Settings ##

### <a id="service-plan"></a>Service Plans ###

Starting with version 1.8.0 of p-mysql, the Operator may now configure multiple service plans. The user interface is simple. Select the "Service Plans" configuration screen from within the p-MySQL tile. Click **Add** to add a new service plan. Click the small triangles to expand or collapse a plan's details.

Plans consist of four required fields, plus the ability to mark plans as 'private':

- Service Plan name: The name by which Developers create service instances both in Apps Manager as well as via the `cf marketplace` CLI. Plan names may include only lowercase letters, numbers, hyphens, and underscores.
  - **Note**: Plan names constraints are only enforced at deploy time. The form does not yet allow for real-time validation. That means that if a plan name does not conform to the correct format, the tile will fail to deploy after you've clicked on **Apply Changes**. The error will appear in the Recent Install Logs pull-down, and will look like this:
    ```
    Error 100: Error filling in template `settings.yml.erb' for `cf-mysql-broker-partition-20d9770a220f749796c2/0' (line 40: Plan name 'ONE HUNDRED MEGA BYTES!!!' must only contain lowercase letters, numbers, hyphen(-), or underscore(_).)
    ```
- Description: The descriptive text which will accompany the plan name. Use this to provide context beyond what can be expressed by the plan name, for example, "general use, small footprint."
- Storage Quota: The maximum amount, in megabytes, of storage allowed each instance of the Service Plan.
- Concurrent Connections Quota: The maximum number of simultaneous database connections allowed to each instance of the Service Plan.
- Private: By default, all plans are published to all organizations. Clicking 'Not available by default' requires the Operator to [publish plans manually](https://docs.pivotal.io/pivotalcf/services/access-control.html#enable-access) using `cf enable-service-access`.
  - **Note**: If you have previously marked a plan as public, and later decide you'd like this plan to be private, you'll have to run `cf disable-service-access` manually for each of your Organizations.

##### Deleting a Plan
Plans can be deleted by clicking on the corresponding Trash Can icon, clicking **Save**, the clicking **Apply Changes** from the Installation Dashboard. You may delete as many plans as you like before clicking **Save** or **Apply Changes**.

You can delete a plan that is still in use, i.e., if there are still service instances of that plan that have not been deleted. In this case, the plan is marked 'inactive' within the Cloud Foundry Marketplace. Existing service instances will continue to be maintained, but new instances cannot be created. The plan will continue to show in the Marketplace. Once the last instance of an old plan has been deleted, the Operator can remove it from the Marketplace by following these steps:

1. Run `bosh deployments` to find the full name of the p-mysql deployment. For example, `p-mysql-180290d67d5441ebf3c5`
1. Run `bosh deployment P-MYSQL-DEPLOYMENT-NAME`. For example, `bosh deployment p-mysql-180290d67d5441ebf3c5`
1. `bosh run errand broker-registrar`

If no services instances of the old plan are still in use, the plan will disappear from commands such as `cf marketplace`.

**Note**: If you accidentally click the trash can, do not click **Save**. Instead, return to the Installation Dashboard and any accidental changes will be discarded. If you do click **Save**, do not click **Apply Changes** on the Installation Dashboard. Instead, click **Revert** to discard any accidental changes.

---

P-MySQL cannot be deployed with zero service plans. One plan, at the minimum, is required. If you wish to deploy P-MySQL without offering any plans, mark the plan as 'private' and do not enable access to any organizations.

<p class="note"><strong>Note</strong>: Unfortunately, the upgrade process is not able to continue using the original name of the plan. Thus, on upgrade from a version of p-MySQL that offered only a single plan, the plan will be renamed. Regardless of the name of the previous plan (e.g., "100mb-dev"), the plan will now be named, `pre-existing-plan`. If you wish to retain the same plan name, it's fine to edit that plan name before clicking 'Apply Changes' to upgrade to p-MySQL v1.8.0.</p>

#### Service Plans before p-mysql v1.8.0

In versions 1.7 and earlier, the product is only capable of offering one service plan at a time.

A single service plan enforces quotas of 100 megabytes of storage per database and 40 concurrent connections per user by default. Users of Operations Manager can configure these plan quotas. Changes to quotas will apply to all existing database instances as well as new instances. In calculating storage utilization, indexes are included along with raw tabular data.

The name of the plan is **100mb-dev** by default and is automatically updated if the storage quota is modified. Thus, if the storage quota is changed to 1024 megabytes, the new default plan name will be **1024mb-dev**.

**Note**: After changing a plan's definition, all instances of the plan must be updated. For each plan, either the operator or the user must run `cf update-service SERVICE_INSTANCE -p NEW_PLAN_NAME` on the command line.

**Further Note**: Changing a plan's definition does not work properly in versions of p-mysql 1.6.3 and earlier. See the entry in [Known Issues](known-issues.html) for the recommended workaround.

Provisioning a service instance from this plan creates a MySQL database on a multi-tenant server, suitable for development workloads. Binding applications to the instance creates unique credentials for each application to access the database.

### <a id="options_and_features"></a>Options and Features ###

In the `Database Configuration` pane, you can change the configuration of the following features:

- Disable Reverse DNS lookups

    This feature is enabled by default, and improves performance. Un-checking this option causes the MySQL servers to perform a reverse DNS lookup on each new connection. It is only necessary when restricting access by hostname, which is not required in typical `p-mysql` installations.

- Read-Only User Password

    Activates a special user, `roadmin`, a read-only administrator. Supply a special password, to be used only by administrators who require the ability to view all of the data maintained by the p-mysql installation. Leaving the field blank de-activates the read-only user.


### <a id="proxy"></a>Proxy ###

The proxy tier is responsible for routing connections from applications to healthy MariaDB cluster nodes, even in the event of node failure.

Applications are provided with a hostname or IP address to reach a database managed by the service. For more information, see [Application Binding](http://docs.pivotal.io/pivotalcf/devguide/services/index.html#application-binding). By default, the MySQL service will provide bound applications with the IP of the first instance in the proxy tier. Even if additional proxy instances are deployed, client connections will not be routed through them. This means the first proxy instance is a single point of failure.

**In order to eliminate the first proxy instance as a single point of failure, operators must configure a load balancer to route client connections to all proxy IPs, and configure the MySQL service to give bound applications a hostname or IP address that resolves to the load balancer.**

#### Configuring a load balancer

In older versions of the product, applications were given the IP of the single MySQL server in bind credentials. When upgrading to v1.5.0, existing applications will continue to function, but, to take advantage of high availability features, they must be rebound to receive either the IP of the first proxy instance or the IP/hostname of a load balancer.

In order to configure a load balancer with the IPs of the proxy tier before v1.5.0 is deployed and prevent applications from obtaining the IP of the first proxy instance, the product enables an operator to configure the IPs that will be assigned to proxy instances. The following instructions applies to the **Proxy** settings page for the MySQL product in Operation Manager.

- In the **Proxy IPs** field, enter a list of IP addresses that should be assigned to the proxy instances. These IP addresses must be in the CIDR range configured in the Director tile and not be currently allocated to another VM. Look at the **Status** pages of other tiles to see what IP addresses are in use.

- In the **Binding Credentials Hostname** field, enter the hostname or IP address that should be given to bound applications for connecting to databases managed by the service. This hostname or IP address should resolve to your load balancer and be considered long-lived. When this field is modified, applications must be rebound to receive updated credentials.

Configure your load balancer to route connections for a hostname or IP to the proxy IPs. As proxy instances are not synchronized, we recommend configuring your load balancer to send all traffic to one proxy instance at a time until it fails, then failover to another proxy instance. For details, see [Known Issues](#known-issues).

**Important**: To configure your load balancer with a healthcheck or monitor, use TCP against port **1936**. Unauthenticated healthchecks against port 3306 will cause the service to become unavailable, and will require manual intervention to fix.

#### Adding a load balancer after an initial deploy

If v1.5.0 is initially deployed without a load balancer and without proxy IPs configured, a load balancer can be setup later to remove the proxy as a single point of failure. However, there are several implications to consider:

- Applications will have to be rebound to receive the hostname or IP that resolves to the load balancer. To rebind: unbind your application from the service instance, bind it again, then restage your application. For more information see [Managing Service Instances with the CLI](http://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html). In order to avoid unnecessary rebinding, we recommend configuring a load balancer before deploying v1.5.0.
- Instead of configuring the proxy IPs in Operations manager, use the IPs that were dynamically assigned by looking at the **Status** page. Configuration of proxy IPs after the product is deployed with dynamically assigned IPs is not well supported; see [Known Issues](#known-issues).

### <a id="lifecycle-errands"></a>Lifecycle Errands ###

Two lifecycle errands are run by default: the **broker registrar** and the **smoke test**. The broker registrar errand registers the broker with the Cloud Controller and makes the service plan public. The smoke test errand runs basic tests to validate that service instances can be created and deleted, and that applications pushed to Elastic Runtime can be bound and write to MySQL service instances. Both errands can be turned on or off on the **Lifecycle Errands** page under the **Settings** tab.

### <a id="resource-config"></a>Resource Config ###

#### <a id="instance-capacity"></a>Instance Capacity ####

An operator can configure how many database instances can be provisioned (instance capacity) by configuring the amount of persistent disk allocated to the MySQL server nodes. The broker will  provision a requested database if there is sufficient unreserved persistent disk. This can be managed using the Persistent Disk field for the MySQL Server job in the Resource Config setting page in Operations Manager. Not all persistent disk will be available for instance capacity; about 2-3 GB is reserved for service operation. Adding nodes to the cluster increases durability, not capacity. Multiple backend clusters, to increase capacity or for isolation, are not yet supported.

In determining how much persistent disk to make available for databases, operators should also consider that MariaDB servers require sufficient CPU, RAM, and IOPS to promptly respond to client requests for all databases.

## <a id="provision-and-bind"></a>Provisioning and Binding via Cloud Foundry ##

As part of installation the product is automatically registered with [Pivotal Cloud Foundry&reg;](https://network.pivotal.io/products/pivotal-cf) Elastic Runtime (see [Lifecycle Errands](#lifecycle-errands)). On successful installation, the MySQL service is available to application developers in the Services Marketplace, via the web-based Developer Console or `cf marketplace`. Developers can then provision instances of the service and bind them to their applications:

<pre class="terminal">
$ cf create-service p-mysql 100mb-dev mydb
$ cf bind-service myapp mydb
$ cf restart myapp
</pre>

For more information about the use of services, see the [Services Overview](http://docs.pivotal.io/pivotalcf/devguide/services/).

## <a id="example-app"></a>Example Application ##

To help application developers get started with MySQL for PCF, we have provided an example application, which can be [downloaded here][example-app]. Instructions can be found in the included README.

[example-app]:mysql-example-app.tgz

## <a id="dashboard"></a>Service Instance Dashboard ##

Cloud Foundry users can access a dashboard for each MySQL service instances via SSO from Apps Manager. The dashboard displays current storage utilization of the database and the plan quota for storage. On the Space page in Apps Manager, users with the SpaceDeveloper role will find a **Manage** link next to the instance. Clicking this link will log users into the service dashboard via SSO.

Additionally, the dashboard URL can be discovered via the CLI, using `cf service [instance name]`. For example:

```
$ cf service acceptDB

Service instance: acceptDB
Service: p-mysql
Plan: 100mb-dev
Description: MySQL service for application development and testing
Documentation url:
Dashboard: https://p-mysql.sys.acceptance.cf-app.com/manage/instances/ddfa6842-b308-4983-a544-50b3d1fb62f0
```

In this example, the URL to the instance dashboard is: `https://p-mysql.sys.acceptance.cf-app.com/manage/instances/ddfa6842-b308-4983-a544-50b3d1fb62f0`

## <a id="proxy-dashboard"></a>Proxy Dashboard ##

The service provides a dashboard where administrators can observe health and metrics for each instance in the proxy tier. Metrics include the number of client connections routed to each backend database cluster node.

The dashboard for each proxy instance can be found at: `http://proxy-<job index>-p-mysql.<system-domain>`. Job index starts at 0 so if you have two proxy instances deployed and your system-domain is `example.com`, dashboards would be accessible at `http://proxy-0-p-mysql.example.com` and `http://proxy-1-p-mysql.example.com`.

Basic auth credentials are required to access the dashboard. These can be found in the Credentials tab of the MySQL product in Operations Manager.

For more information about SwitchBoard, read the [proxy documentation](proxy.html)

## <a id="SeeAlso"></a>See Also##

  * [Notes on cluster configuration](cluster-config.html)
  * [Backing Up MySQL for PCF](backup.html)<br>
    **Note**: For information about backing up your PCF installation, refer to [Backing Up and Restoring Pivotal Cloud Foundry&reg;](http://docs.pivotal.io/pivotalcf/customizing/backup-restore/index.html).
  * [Determining MySQL cluster state](cluster-state.html)
  * [More on Cluster Scaling, Node Failure, and Quorum](cluster-behavior.html)
  * [Bootstrapping an ailing MySQL cluster](bootstrapping.html)
