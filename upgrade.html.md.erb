---
title: Upgrading VMware SQL with MySQL for Tanzu Application Service
owner: MySQL
---

<strong><%= modified_date %></strong>

You can upgrade the <%= vars.product_full %> service and existing service instances.
You can also learn about service interruptions that can result from service changes and upgrades and from
failures at the process, VM, and IaaS level.

<%= partial vars.path_to_partials + '/upgrade-planner' %>

## <a id="upgrade-service"></a>Upgrading <%= vars.product_short %>

To upgrade the <%= vars.product_short %> service, follow the <%= vars.ops_manager %> process that you
use to install the service for the first time.
Your configuration settings migrate to the new version automatically.

To upgrade <%= vars.product_short %>:

1. Review the [Release Notes](./release-notes.html) for the version you are upgrading to.

1. Download the Ubuntu Jammy stemcell from
[<%= vars.product_network %>](https://network.tanzu.vmware.com/products/stemcells-ubuntu-jammy/),
and import it into the <%= vars.ops_manager %> Stemcell Library.
For instructions, see [Verify stemcell version and apply all changes](./install-config.html#stemcell).

1. Download the desired version of the product from
[<%= vars.product_network %>](https://network.tanzu.vmware.com/products/pivotal-mysql/).

1. Go to the <%= vars.ops_manager %> Installation Dashboard and
click **Import a Product** to upload the product file.

1. Under the **Import a Product** button, click **+** next to **<%= vars.product_short %>**.
This adds the tile to your staging area.

1. Click the newly-added **<%= vars.product_short %>** tile to review its configuration panes.
Click **Save** on any panes where you make changes.
    <p> To decrease the runtime for service instance upgrades,
      configure the <code>upgrade-all-service-instances</code> errand in the tile.
      For instructions about configuring this errand,
      see <a href="./install-config.html#service-instance-upgrades">Configure service instance upgrades</a>.

    </p>

1. (Optional) If you want developers to individually upgrade service instances, go to
to the **Errands** pane and select **Off** for **Upgrade all On-demand MySQL Service Instances**.
<br><br>
By default, the `upgrade-all-service-instances` errand runs after each upgrade.
For more information, see
[About individual service instance upgrades](#individual-upgrades).

1. Go to **<%= vars.ops_manager %> Dashboard** > **Review Pending Changes**.
For more information about this <%= vars.ops_manager %> page,
see [Reviewing pending product changes](https://docs.vmware.com/en/VMware-Tanzu-Operations-Manager/3.0/vmware-tanzu-ops-manager/install-review-pending-changes.html).

1. For the <%= vars.product_short %> tile, enable the **Registering on-demand MySQL broker** errand if the errand is not already enabled.

1. Click **Apply Changes**.

Upgrading the <%= vars.product_short %> service and service instances can temporarily interrupt
the service.
For more information, see [Service interruptions](#interruptions).

### <a id="57-to-80-upgrade"></a> Upgrading from MySQL 5.7 to 8.0

After upgrading to <%= vars.product_short %> v3.x, you can upgrade your service instances from Percona 5.7 to Percona 8.0. Percona 8.0 includes significant changes.
<%= vars.product_short %> v3.x addresses the major upgrade incompatibilities, but in some cases, client applications that are bound to a service instance that uses Percona v5.7 might have compatibility issues when the service instance is upgraded to use Percona 8.0.

To better understand the possible compatibility issues, consider the following options:

+ Read the [compatibility documentation from Percona](https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html#mysql-nutshell-removals). This provides details on where application SQL might fail to execute correctly.
+ Consider making a backup of the current (Percona 5.7) database and restoring from the backup to a new 8.0 service instance in a non-production environment. See [Backup and Restore](./backup-restore.html). Then connect the relevant application and execute the appropriate tests for functionality and performance, if available.
+ Percona has a set of [compatibility testing tools](https://www.percona.com/blog/percona-utilities-that-make-major-mysql-version-upgrades-easier) that can be used to run existing queries against an upgraded schema. This process provides a mechanism to thoroughly test the application against the upgraded database. It can highlight potential incompatibility errors and performance changes.
+ MySQL also offers a comprehensive [upgrade guide](https://dev.mysql.com/doc/refman/8.0/en/upgrading.html) with a special section highlighting [best practices](https://dev.mysql.com/doc/refman/8.0/en/upgrade-best-practices.html).

>**Note**
>These tools are an optional source of feedback that can provide additional confidence while evaluating an upgrade from MySQL 5.7 to 8.0. No individual tool can guarantee a successful upgrade. It is your responsibility to fully review your unique database configuration.

### <a id="individual-upgrades"></a> About individual service instance upgrades

<p class="note important">
<span class="note__title">Important</span>
To allow developers to upgrade individual service
instances, you must use <%= vars.app_runtime_full %> v2.7 or later.
</p>

After you upgrade the <%= vars.product_short %> tile, existing service instances must be upgraded to
use the latest version of the tile.
Developers cannot create new bindings to service instances that have not been upgraded.

MySQL Tile versions 3.0 and 3.1 allow plans to be configured with either MySQL versions 5.7 and 8.0.
When you upgrade the tile, configured plans retain their MySQL version, and unused plans you
newly-configure default to MySQL 8.0. You configure the MySQL plan version in each plan's
topology section; select the desired MySQL version from the dropdown:

<img src="../images/mysql-5.7-8.0-dropdown.png" alt="MySQL 5.7 and 8.0 version dropdown">

Note:
- If you change a plan's MySQL version from 5.7 to 8.0, then any subsequent updates to a service instance
  created with that plan will effect an upgrade of that instance's MySQL from 5.7 to 8.0. This includes
  both batch updates to all service instances via the "upgrade-all-service-instances" errand, and also
  individual service instance updates via a "cf update-service --upgrade" command.
  to a service instance created with that plan
- Plans may only be upgraded, downgrades are not supported. If you change an existing plan's
  MySQL 8.0 to 5.7, you may "apply changes" to save the plan modification, but any attempts to update
  plan service instances will fail with a message indicating that a downgrade was attempted.

- To decrease runtime for service instance upgrades, developers can individually upgrade
  on-demand service instances using the Cloud Foundry Command Line Interface (cf CLI).
  Developers can upgrade individual service instances by following the procedure in
  [Upgrade an Individual Service Instance](./use.html#single).

Developers can only upgrade individual service instances if you deactivate the `upgrade-all-service-instances`
errand when upgrading the tile.
By default, <%= vars.product_short %> runs this errand when you upgrade the tile.
However, this operation can take a long time.
You must also ensure that the `register-broker` errand is run during upgrades.
For more information about the `register broker` errand, see [register-broker](./errands.html#register-broker).

## <a id="interruptions"></a>Service interruptions

Service changes, upgrades, and failures at the process, VM, and IaaS level can cause outages
in the <%= vars.product_short %> service.

Read this section if:

+ You are planning an upgrade.
+ You are experiencing a service interruption and are wondering why.
+ You are planning to update or change a service instance and want to know if it might cause a service interruption.

### <a id='service-update'></a>Stemcell or service update

An operator updates a stemcell version or their version of <%= vars.product_short %>.

- <strong>Impact:</strong> Apps lose access to the MySQL service while <%= vars.ops_manager %>
 updates the service instance they are bound to.
          The service resumes within 10–15 minutes.
- <strong>Required Actions:</strong> None. If the update deploys successfully, apps reconnect automatically.

### <a id='change-plan'></a>Plan change

A developer changes their service instance to provide a different service plan, using `cf update-service` or Apps Manager.
This process is used to update Service Instances from Percona 5.7 to Percona 8.0.
For example:
```
cf update-service SERVICE-INSTANCE -p PLAN-WITH-8.0
```

- <strong>Impact:</strong> Apps lose access to the MySQL service while <%= vars.ops_manager %>
updates the service instance they are bound to.
          The service resumes within 10–15 minutes.
- <strong>Required Actions:</strong> None. If the plan change deploys successfully,
the apps reconnect automatically.

### <a id='upgrade-interruption'></a>Service broker deployments

Automated backups are not taken during service broker deployments.

When the service broker is unavailable, such as during upgrades and re-deployments,
automated backups fail.
Automated backups resume according to schedule when the service broker is online again.

For general information about backups, see [Backing up and restoring <%= vars.product_full %>](backup-restore.html)
and [Configuring automated backups](automated-backup.html).
